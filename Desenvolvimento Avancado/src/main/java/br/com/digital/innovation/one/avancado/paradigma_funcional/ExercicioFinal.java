package br.com.digital.innovation.one.avancado.paradigma_funcional;

public class ExercicioFinal {
	
	/*1. E aquele que expressa o código através de comandos ao
	 * 	computador, nele é possível ter controle de estado dos 
	 * 	objetos, de acordo com a afirmação. Qual alternativa representa
	 * 	esse paradigma :
	 * ( ) Declarativo
	 * ( ) Imutabilidade
	 * ( ) Funcional
	 * ( ) Recursividade
	 * (X) Imperativo *************/
	
	/*2. Damos uma regra, uma declaração de como queremos que o programa
	 * 	se comporte, de acordo com a afirmação.
	 * 	Qual alternativa representa esse paradigma :
	 *( ) Composição de funções
	 *( ) Imutabilidade
	 *(X) Funcional
	 *( ) Recursividade
	 *( ) Imperativo *****/
	
	/*3. Uma vez que uma variável que recebe um valor, esta vai possuir 
	 * 	esse valor para sempre, ou quando criamos um objeto ele não pode 
	 * 	ser modificado, de acordo com a afirmação.
	 * 	Qual alternativa representa esse paradigma :
	 *( ) Composição de funções
	 *(X) Imutabilidade
	 *( ) Funcional
	 *( ) Recursividade
	 *( ) Imperativo *****/
	
	/*4. Qual é a sintaxe base de uma lambda ?
	 *( ) Tipo nomeVariavel = parametro -> lógica
	 *( ) Tipo nomeVariavel = valor;
	 *( ) TipoAbstrato nomeVariavel = valor
	 *(X) InterfaceFuncional nomeVariavel = parametro -> lógica
	 *( ) TipoEnum nomeVariavel = parametro -> lógica *****/
	
	/*5. Quando devemos utilizar chaves em uma lambda ?
	 *( ) Quando o mesmo possui apenas uma instrução
	 *( ) Quando utilizamos a referencia do método
	 *( ) Quando utilizamos a interface Runnable
	 *(X) Quando o mesmo possui mais de uma instrução
	 *( ) Quando o mesmo não possui nenhuma instrução *****/
	
	/*6. Qual das alternativas a seguir é uma declaração de um lambda .
	 *( ) Funcao a = "2";
	 *( ) Funcao a => "2";
	 *( ) Funcao a = a => "2";
	 *( ) Funcao a -> "2";
	 *(X) Funcao a = valor -> "2"; *****/
	
	/*7. Antes do Java 8 , qual era a estratégia utilizada para implementação
	 * 	de interface em uma classe específica .
	 *(X) Classe Anônima
	 *( ) Declaração de outra interface
	 *( ) Enum
	 *( ) Classe Abstrata
	 *( ) Encapsulamento *****/

}
